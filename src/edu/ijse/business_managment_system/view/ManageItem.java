/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.ijse.business_managment_system.view;

import edu.ijse.business_managment_system.controller.ControllerFactory;
import edu.ijse.business_managment_system.controller.custom.BrandController;
import edu.ijse.business_managment_system.controller.custom.CategoryController;
import edu.ijse.business_managment_system.controller.custom.ItemController;
import edu.ijse.business_managment_system.dto.BrandDTO;
import edu.ijse.business_managment_system.dto.CategoryDTO;
import edu.ijse.business_managment_system.dto.ItemDTO;
import java.awt.KeyEventPostProcessor;
import java.awt.KeyboardFocusManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
public class ManageItem extends javax.swing.JFrame {

    private ItemController ctrlItem;
    private CategoryController ctrlCategory;
    private BrandController ctrlBrand;
    private Timer tmrTime;
    
    public ManageItem() {
        ctrlItem = (ItemController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.ITEM);
        ctrlCategory = (CategoryController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.CATEGORY);
       ctrlBrand = (BrandController) ControllerFactory.getInstance().getController(ControllerFactory.ControllerTypes.BRAND);
      
        initComponents();
        loadCategories();
         loadBrands();
         loadKeyListener();
         AutoComplete();
         setTime();
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        lblAddNew = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        lblDelete = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        lblUpdate = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        cmbBrand = new javax.swing.JComboBox();
        cmbCat = new javax.swing.JComboBox();
        txtICode = new javax.swing.JTextField();
        txtBrand = new javax.swing.JTextField();
        txtcat = new javax.swing.JTextField();
        lblCategory = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        lblBrand = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtModel = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblbackCustOr = new javax.swing.JLabel();
        pnlTime = new javax.swing.JPanel();
        lblTime = new javax.swing.JLabel();
        lblBack = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Manage Items");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 360, 50));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 420, 50));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jPanel3.setMinimumSize(new java.awt.Dimension(100, 40));
        jPanel3.setPreferredSize(new java.awt.Dimension(1300, 40));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel24.setBackground(new java.awt.Color(0, 0, 0));
        jLabel24.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("Ecs");
        jLabel24.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLabel24.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel24.setOpaque(true);
        jLabel24.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel24MouseClicked(evt);
            }
        });
        jPanel3.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 11, 50, 20));

        jLabel25.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("Back");
        jPanel3.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 30, 20));

        lblAddNew.setBackground(new java.awt.Color(0, 0, 0));
        lblAddNew.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblAddNew.setForeground(new java.awt.Color(255, 255, 255));
        lblAddNew.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddNew.setText("Ctrl");
        lblAddNew.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        lblAddNew.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblAddNew.setOpaque(true);
        lblAddNew.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblAddNewMouseClicked(evt);
            }
        });
        jPanel3.add(lblAddNew, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 10, 50, 20));

        jLabel26.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("View Items ");
        jPanel3.add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 10, 140, 20));

        jLabel23.setBackground(new java.awt.Color(0, 0, 0));
        jLabel23.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 255, 255));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setText("Home");
        jLabel23.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLabel23.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel23.setOpaque(true);
        jLabel23.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel23MouseClicked(evt);
            }
        });
        jPanel3.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 10, 50, 20));

        jLabel27.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("Select");
        jPanel3.add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 50, 20));

        lblDelete.setBackground(new java.awt.Color(0, 0, 0));
        lblDelete.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblDelete.setForeground(new java.awt.Color(255, 255, 255));
        lblDelete.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDelete.setText("Delete");
        lblDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        lblDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblDelete.setOpaque(true);
        lblDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblDeleteMouseClicked(evt);
            }
        });
        lblDelete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                lblDeleteKeyPressed(evt);
            }
        });
        jPanel3.add(lblDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 10, 50, 20));

        jLabel29.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("Delete Item");
        jPanel3.add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 10, 100, 20));

        lblUpdate.setBackground(new java.awt.Color(0, 0, 0));
        lblUpdate.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lblUpdate.setForeground(new java.awt.Color(255, 255, 255));
        lblUpdate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUpdate.setText("Alt");
        lblUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        lblUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblUpdate.setOpaque(true);
        lblUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblUpdateMouseClicked(evt);
            }
        });
        jPanel3.add(lblUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 10, 50, 20));

        jLabel31.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("Update Item details");
        jPanel3.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 10, 140, 20));

        jLabel28.setBackground(new java.awt.Color(0, 0, 0));
        jLabel28.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("Enter");
        jLabel28.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        jLabel28.setOpaque(true);
        jPanel3.add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 50, 20));

        jLabel30.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("Add New Item ");
        jPanel3.add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 10, 140, 20));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 690, 1280, -1));

        cmbBrand.setEditable(true);
        cmbBrand.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        cmbBrand.setMaximumRowCount(100);
        cmbBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbBrandActionPerformed(evt);
            }
        });
        jPanel1.add(cmbBrand, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 380, 140, 30));

        cmbCat.setEditable(true);
        cmbCat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCatActionPerformed(evt);
            }
        });
        jPanel1.add(cmbCat, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 250, 140, 30));

        txtICode.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtICode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtICodeActionPerformed(evt);
            }
        });
        jPanel1.add(txtICode, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 170, 140, 30));

        txtBrand.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrandActionPerformed(evt);
            }
        });
        jPanel1.add(txtBrand, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 430, 340, 30));

        txtcat.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtcat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcatActionPerformed(evt);
            }
        });
        jPanel1.add(txtcat, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 300, 340, 30));

        lblCategory.setBackground(new java.awt.Color(0, 255, 0));
        lblCategory.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblCategory.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblCategory.setText("Add New Category");
        lblCategory.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0), 2));
        lblCategory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblCategory.setOpaque(true);
        lblCategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblCategoryMouseClicked(evt);
            }
        });
        jPanel1.add(lblCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 300, 150, 30));

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Item Code :");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 170, 100, 30));

        lblBrand.setBackground(new java.awt.Color(0, 255, 0));
        lblBrand.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        lblBrand.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblBrand.setText("Add New Brand");
        lblBrand.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0), 2));
        lblBrand.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblBrand.setOpaque(true);
        lblBrand.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblBrandMouseClicked(evt);
            }
        });
        jPanel1.add(lblBrand, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 430, 150, 30));

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Category :");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 250, 100, 30));

        jLabel15.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Brand :");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 380, 100, 30));

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Model :");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 510, 100, 30));

        txtModel.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPanel1.add(txtModel, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 510, 420, 30));

        jLabel3.setOpaque(true);
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 130, 1260, 535));

        jLabel7.setFont(new java.awt.Font("Times New Roman", 3, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, 280, 30));

        lblbackCustOr.setBackground(new java.awt.Color(153, 0, 153));
        lblbackCustOr.setOpaque(true);
        jPanel1.add(lblbackCustOr, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 1270, 570));

        pnlTime.setBackground(new java.awt.Color(255, 255, 255));
        pnlTime.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTime.setFont(new java.awt.Font("Times New Roman", 3, 36)); // NOI18N
        lblTime.setForeground(new java.awt.Color(0, 0, 204));
        lblTime.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pnlTime.add(lblTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 290, 50));

        jPanel1.add(pnlTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(1030, 20, 290, 50));

        lblBack.setBackground(new java.awt.Color(102, 102, 102));
        lblBack.setOpaque(true);
        jPanel1.add(lblBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1366, 768));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel24MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel24MouseClicked

        Back();
        
    }//GEN-LAST:event_jLabel24MouseClicked

    private void lblAddNewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblAddNewMouseClicked
       AddItem();
       
    }//GEN-LAST:event_lblAddNewMouseClicked

    private void lblDeleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lblDeleteKeyPressed
       
    }//GEN-LAST:event_lblDeleteKeyPressed

    private void lblDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDeleteMouseClicked
       DeleteItem();
        	
    }//GEN-LAST:event_lblDeleteMouseClicked

    private void lblUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblUpdateMouseClicked
        UpdateItem();
       		
    }//GEN-LAST:event_lblUpdateMouseClicked

    private void lblCategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblCategoryMouseClicked

	String catId= (String) cmbCat.getSelectedItem();
        String catName= txtcat.getText();
        
             if (catName.matches("[A-Za-z ]+")) {
			
                CategoryDTO categoryDTO = new CategoryDTO(catId,catName);
                try{
                    boolean isAdded= ctrlCategory.add(categoryDTO);
                if(isAdded){
                    JOptionPane.showMessageDialog(ManageItem.this," Category Added Successfully...");
                    loadCategories();
                }
                }catch(SQLException e){
                    JOptionPane.showMessageDialog(ManageItem.this,e);
                }catch(ClassNotFoundException e){
                    JOptionPane.showMessageDialog(ManageItem.this,e);
                } catch (Exception ex) {
                    Logger.getLogger(ManageItem.class.getName()).log(Level.SEVERE, null, ex);
                }
                
             }else{
                 JOptionPane.showMessageDialog(this, "Check Again, And Input Validate Data To Proceed. ", "Error", JOptionPane.ERROR_MESSAGE);
             }
    }//GEN-LAST:event_lblCategoryMouseClicked

    private void txtBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBrandActionPerformed

    private void txtcatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcatActionPerformed

    private void lblBrandMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblBrandMouseClicked
                String brandId= (String) cmbBrand.getSelectedItem();
                String brandName= txtBrand.getText();
                
                 if (brandName.matches("[A-Za-z ]+")) {

                    BrandDTO brandDTO = new BrandDTO(brandId,brandName);
                    try{
                        boolean isAdded= ctrlBrand.add(brandDTO);
                    if(isAdded){
                        JOptionPane.showMessageDialog(ManageItem.this,"Brand Added Successfully...");
                        loadBrands();
                    }
                    }catch(SQLException e){
                        JOptionPane.showMessageDialog(ManageItem.this,e);
                    }catch(ClassNotFoundException e){
                        JOptionPane.showMessageDialog(ManageItem.this,e);
                    } catch (Exception ex) {
                        Logger.getLogger(ManageItem.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                 }else{
                     JOptionPane.showMessageDialog(this, "Check Again, And Input Validate Data To Proceed. ", "Error", JOptionPane.ERROR_MESSAGE);
                 }

    }//GEN-LAST:event_lblBrandMouseClicked

    private void jLabel23MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel23MouseClicked
        ViewallItem();
       
    }//GEN-LAST:event_jLabel23MouseClicked

    private void cmbCatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCatActionPerformed
       try {
            String catId=(String)cmbCat.getSelectedItem();
            CategoryDTO category=ctrlCategory.search(catId);
            txtcat.setText(category.getCategoryName());
            
        } catch (Exception ex) {
           // Logger.getLogger(SupOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbCatActionPerformed

    private void cmbBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbBrandActionPerformed
        try {
            String brandId=(String)cmbBrand.getSelectedItem();
            BrandDTO brand=ctrlBrand.search(brandId);
            txtBrand.setText(brand.getBrandName());
            
        } catch (Exception ex) {
           // Logger.getLogger(SupOrder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbBrandActionPerformed

    private void txtICodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtICodeActionPerformed
        String icode=txtICode.getText();
		try{
		ItemDTO item=ctrlItem.search(icode);
		if(item!=null){
			cmbCat.setSelectedItem(item.getCategory());
			cmbBrand.setSelectedItem(item.getBrand());
                        txtModel.setText(item.getModel());
			
		}else{
			JOptionPane.showMessageDialog(ManageItem.this,"Item not found...");
		}
		}catch(SQLException e){
			JOptionPane.showMessageDialog(ManageItem.this,e.getMessage());
		}catch(ClassNotFoundException e){
                    JOptionPane.showMessageDialog(ManageItem.this,e.getMessage());
		} catch (Exception ex) {	
              Logger.getLogger(ManageItem.class.getName()).log(Level.SEVERE, null, ex);
          }	
    }//GEN-LAST:event_txtICodeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageItem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbBrand;
    private javax.swing.JComboBox cmbCat;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JLabel lblAddNew;
    private javax.swing.JLabel lblBack;
    private javax.swing.JLabel lblBrand;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblDelete;
    private javax.swing.JLabel lblTime;
    private javax.swing.JLabel lblUpdate;
    private javax.swing.JLabel lblbackCustOr;
    private javax.swing.JPanel pnlTime;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtICode;
    private javax.swing.JTextField txtModel;
    private javax.swing.JTextField txtcat;
    // End of variables declaration//GEN-END:variables

   private void loadCategories() {
        try {
            String cat = null;
            
            ArrayList<CategoryDTO> allCategory=ctrlCategory.getAll();
            if (allCategory == null) {
                return;
            }
            cmbCat.removeAllItems();
            for(CategoryDTO category: allCategory){
                cat=category.getCategoryId();
                cmbCat.addItem(cat);
            }
        } catch (Exception ex) {
            Logger.getLogger(ManageItem.class.getName()).log(Level.SEVERE, null, ex);
        }
           
   }
   

    private void loadBrands()  {
       
        try {
            String brandId = null;
            
            ArrayList<BrandDTO> allBrand=ctrlBrand.getAll();
            if (allBrand == null) {
                return;
            }
            cmbBrand.removeAllItems();
            for(BrandDTO brand: allBrand){
                brandId=brand.getBrandId();
                cmbBrand.addItem(brandId);
            }
        } catch (Exception ex) {
            Logger.getLogger(ManageItem.class.getName()).log(Level.SEVERE, null, ex);
        }
       
           
            
        
    }

    private void DeleteItem() {
        String icode=txtICode.getText();
        try{
	boolean isDeleted=ctrlItem.delete(icode);
	if(isDeleted){
            JOptionPane.showMessageDialog(ManageItem.this," Item Deleted...");
	}else{
            JOptionPane.showMessageDialog(ManageItem.this,"Item not found...");
	}
	}catch(SQLException e){
		System.out.println(e.getMessage());
	}catch(ClassNotFoundException e){
		System.out.println(e.getMessage());
	} catch (Exception ex) {		
            Logger.getLogger(ManageItem.class.getName()).log(Level.SEVERE, null, ex);
        }	
    }

    private void UpdateItem() {
         String icode=txtICode.getText();
	String category=(String) cmbCat.getSelectedItem();
        String brand=(String) cmbBrand.getSelectedItem();
	String model=txtModel.getText();
	
        ItemDTO itemDTO = new ItemDTO(icode,category,brand,model);
	try{
            boolean isUpdate=ctrlItem.update(itemDTO);
	if(isUpdate){
            JOptionPane.showMessageDialog(ManageItem.this,"Item Update Success...");
	}else{
            JOptionPane.showMessageDialog(ManageItem.this,"Item Update Fail");
	}
        }catch(SQLException e){
            JOptionPane.showMessageDialog(ManageItem.this,e.getMessage());
	}catch(ClassNotFoundException e){
            JOptionPane.showMessageDialog(ManageItem.this,e.getMessage());
	} catch (Exception ex) {			
            Logger.getLogger(ManageItem.class.getName()).log(Level.SEVERE, null, ex);
        }	
    }

    private void AddItem() {
        String icode=txtICode.getText();
	String category=(String) cmbCat.getSelectedItem();
        String brand=(String) cmbBrand.getSelectedItem();
	String model=txtModel.getText();
      
			
	 ItemDTO itemDTO = new ItemDTO(icode,category,brand,model);
	try{
            boolean isAdded= ctrlItem.add(itemDTO);
	if(isAdded){
            JOptionPane.showMessageDialog(ManageItem.this,"Item Added Successfully...");
	}
	}catch(SQLException e){
             String errorMsg;
                switch (e.getErrorCode()){
                    case 1062:
                        errorMsg = "Duplicate entry has been found. Please enter valid Item Code to proceed.";
                        break;
                    default:
                        errorMsg = "Item has been failed to add";
                        break;
                }
        }catch(ClassNotFoundException e){
            JOptionPane.showMessageDialog(ManageItem.this,e);
        } catch (Exception ex) {
            Logger.getLogger(ManageItem.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void ViewallItem() {
         new ViewItem().setVisible(true);
    }

    private void Back() {
        this.dispose();
        tmrTime.stop();
    }

    private void loadKeyListener() {
         KeyboardFocusManager manger = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        manger.addKeyEventPostProcessor(new KeyEventPostProcessor() {

            @Override
            public boolean postProcessKeyEvent(KeyEvent e) {
                if(e.getID()== KeyEvent.KEY_PRESSED){
                    switch(e.getKeyCode()){
                        case KeyEvent.VK_CONTROL:
                            AddItem();break;
                        case KeyEvent.VK_ALT:
                            UpdateItem();break;
                         case KeyEvent.VK_DELETE:
                            DeleteItem();break;
                        case KeyEvent.VK_HOME:
                            ViewallItem();break;
                        case KeyEvent.VK_ESCAPE:
                            Back();break;
                        
                    }
                }
                return false;
            }
        });
    }

   
    

    private void AutoComplete() {
         AutoCompleteDecorator.decorate(cmbBrand);
         AutoCompleteDecorator.decorate(cmbCat);
    }

    private boolean Check(){
       
      
       String model = txtModel.getText();
        
          if (model.matches("[A-Za-z0-9 ]")) {  
                return true;
          }
                     
         return false;
    }

    private void setTime() {
          tmrTime=new Timer(0, new ActionListener() {

           
            public void actionPerformed(ActionEvent e) {
                Date dt = new Date();
                SimpleDateFormat sdf = new SimpleDateFormat("hh: mm: ss");
                lblTime.setText(sdf.format(dt));
            }

        } );
         tmrTime.start();
    }
    
}
